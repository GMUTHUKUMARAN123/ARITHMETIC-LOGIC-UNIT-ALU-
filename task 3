module PipelinedProcessor (
    input clk
);

// ==== Register File (8 registers) ====
reg [7:0] regfile [0:7];

// ==== Instruction Memory ====
reg [15:0] instr_mem [0:15];

// ==== Data Memory ====
reg [7:0] data_mem [0:15];

// ==== Pipeline Registers ====
reg [15:0] IF_ID, ID_EX;
reg [7:0] EX_WB_data;
reg [3:0] EX_WB_rd;
reg       EX_WB_we;

// ==== Initial Program ====
initial begin
    // Format: Opcode | Rd | Rs1 | Rs2/Imm
    instr_mem[0] = 16'b0001_0001_0000_0010;  // ADD R1 = R0 + R2
    instr_mem[1] = 16'b0010_0010_0001_0011;  // SUB R2 = R1 - R3
    instr_mem[2] = 16'b0011_0011_0000_0100;  // LOAD R3 = MEM[4]

    // Initialize register values
    regfile[0] = 8'd10;
    regfile[2] = 8'd5;
    regfile[3] = 8'd3;

    // Initialize data memory
    data_mem[4] = 8'd99;
end

reg [3:0] pc = 0;
wire [15:0] instr = instr_mem[pc];

// ==== Pipeline Process ====
always @(posedge clk) begin
    // ---- Stage 4: WB ----
    if (EX_WB_we) begin
        regfile[EX_WB_rd] <= EX_WB_data;
        $display("WB: Write %d to R%d", EX_WB_data, EX_WB_rd);
    end

    // ---- Stage 3: EX ----
    reg [3:0] opcode = ID_EX[15:12];
    reg [3:0] rd = ID_EX[11:8];
    reg [3:0] rs1 = ID_EX[7:4];
    reg [3:0] rs2 = ID_EX[3:0];

    EX_WB_we = 0;
    case (opcode)
        4'b0001: begin // ADD
            EX_WB_data = regfile[rs1] + regfile[rs2];
            EX_WB_we = 1;
            EX_WB_rd = rd;
            $display("EX: ADD R%d = R%d + R%d", rd, rs1, rs2);
        end
        4'b0010: begin // SUB
            EX_WB_data = regfile[rs1] - regfile[rs2];
            EX_WB_we = 1;
            EX_WB_rd = rd;
            $display("EX: SUB R%d = R%d - R%d", rd, rs1, rs2);
        end
        4'b0011: begin // LOAD
            EX_WB_data = data_mem[rs2]; // rs2 is address
            EX_WB_we = 1;
            EX_WB_rd = rd;
            $display("EX: LOAD R%d = MEM[%d]", rd, rs2);
        end
        default: ;
    endcase

    // ---- Stage 2: ID ----
    ID_EX <= IF_ID;
    $display("ID: Decoding Instruction %b", IF_ID);

    // ---- Stage 1: IF ----
    IF_ID <= instr;
    $display("IF: Fetching instruction %b from PC=%d", instr, pc);
    pc <= pc + 1;
end

endmodule
output:
IF: Fetching instruction 0001000100000010 from PC=0
ID: Decoding Instruction 0001000100000010
EX: ADD R1 = R0 + R2
WB: Write 15 to R1

IF: Fetching instruction 0010001000010011 from PC=1
ID: Decoding Instruction 0010001000010011
EX: SUB R2 = R1 - R3
WB: Write 12 to R2

IF: Fetching instruction 0011001100000100 from PC=2
ID: Decoding Instruction 0011001100000100
EX: LOAD R3 = MEM[4]
WB: Write 99 to R3
